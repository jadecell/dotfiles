local awesome, client, mouse, screen, tag = awesome, client, mouse, screen, tag
local ipairs, string, os, table, tostring, tonumber, type = ipairs, string, os, table, tostring, tonumber, type

-- Standard awesome library
local gears         = require("gears") --Utilities such as color parsing and objects
local awful         = require("awful") --Everything related to window managment
                      require("awful.autofocus")
-- Widget and layout library
local wibox         = require("wibox")

-- Theme handling library
local beautiful     = require("beautiful")

-- Notification library
local naughty       = require("naughty")
naughty.config.defaults['icon_size'] = 100

local lain          = require("lain")
local freedesktop   = require("freedesktop")

-- Enable hotkeys help widget for VIM and other apps
-- when client with a matching name is opened:
local hotkeys_popup = require("awful.hotkeys_popup").widget
                      require("awful.hotkeys_popup.keys")
local my_table      = awful.util.table or gears.table -- 4.{0,1} compatibility

-- {{{ Error handling
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = tostring(err) })
        in_error = false
    end)
end

local function run_once(cmd_arr)
    for _, cmd in ipairs(cmd_arr) do
        awful.spawn.with_shell(string.format("pgrep -u $USER -fx '%s' > /dev/null || (%s)", cmd, cmd))
    end
end

run_once({ "unclutter -root" }) -- entries must be comma-separated

local themes = {
    "powerarrow-blue", -- 1
    "powerarrow",      -- 2
    "multicolor",      -- 3
}

-- choose your theme here
local chosen_theme = themes[1]
local theme_path = string.format("%s/.config/awesome/themes/%s/theme.lua", os.getenv("HOME"), chosen_theme)
beautiful.init(theme_path)

beautiful.init(gears.filesystem.get_themes_dir() .. "default/theme.lua")

terminal = "alacritty"
editor = "emacsclient -c -n -a emacs"
browser = "brave"

modkey = "Mod4"

awful.layout.layouts = {
    awful.layout.suit.tile,
    awful.layout.suit.floating,
    awful.layout.suit.max.fullscreen,
}

mykeyboardlayout = awful.widget.keyboardlayout()

beautiful.wibar_height = 24

-- Create a wibox for each screen and add it
local taglist_buttons = gears.table.join(
    awful.button({ }, 1, function(t) t:view_only() end),
    awful.button({ modkey }, 1, function(t)
                              if client.focus then
                                  client.focus:move_to_tag(t)
                              end
                          end),
    awful.button({ }, 3, awful.tag.viewtoggle),
    awful.button({ modkey }, 3, function(t)
                              if client.focus then
                                  client.focus:toggle_tag(t)
                              end
                          end),
    awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),
    awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)
)

local tasklist_buttons = gears.table.join(
     awful.button({ }, 1, function (c)
                              if c == client.focus then
                                  c.minimized = true
                              else
                                  c:emit_signal(
                                      "request::activate",
                                      "tasklist",
                                      {raise = true}
                                  )
                              end
                          end),
     awful.button({ }, 3, function()
                              awful.menu.client_list({ theme = { width = 250 } })
                          end),
     awful.button({ }, 4, function ()
                              awful.client.focus.byidx(1)
                          end),
     awful.button({ }, 5, function ()
                              awful.client.focus.byidx(-1)
                          end))

awful.tag({ "1", "2", "3", "4", "5", "6", "7", "8", "9" }, s, awful.layout.layouts[1])

lain.layout.termfair.nmaster           = 3
lain.layout.termfair.ncol              = 1
lain.layout.termfair.center.nmaster    = 3
lain.layout.termfair.center.ncol       = 1
lain.layout.cascade.tile.offset_x      = 2
lain.layout.cascade.tile.offset_y      = 32
lain.layout.cascade.tile.extra_padding = 5
lain.layout.cascade.tile.nmaster       = 5
lain.layout.cascade.tile.ncol          = 2

beautiful.init(string.format(gears.filesystem.get_configuration_dir() .. "/themes/%s/theme.lua", chosen_theme))
--awful.screen.connect_for_each_screen(function(s) beautiful.at_screen_connect(s) end)

root.buttons(gears.table.join(
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))

globalkeys = gears.table.join(
  
    awful.key({ modkey, },
        "s",
        hotkeys_popup.show_help,
        {
          description="show help",
          group="awesome"
        }),
    
    awful.key({ modkey, },
        "Left",
        awful.tag.viewprev,
        {
          description = "view previous",
          group = "tag"
        }),
    
    awful.key({ modkey, },
        "Right",
        awful.tag.viewnext,
        {
          description = "view next",
          group = "tag"
        }),
    
    awful.key({ modkey, },
        "Escape",
        awful.tag.history.restore,
        {
          description = "go back",
          group = "tag"
        }),

    awful.key({ modkey, },
        "j",
        function ()
            awful.client.focus.byidx( 1)
        end,
        {
          description = "focus next by index",
          group = "client"
        }),
    
    awful.key({ modkey, },
        "k",
        function ()
            awful.client.focus.byidx(-1)
        end,
        {
          description = "focus previous by index",
          group = "client"
        }),

    awful.key({ modkey, "Shift" },
        "j",
        function ()
          awful.client.swap.byidx(  1)
        end,
        {
          description = "swap with next client by index",
          group = "client"
        }),

    awful.key({ modkey, "Shift" },
        "k",
        function ()
          awful.client.swap.byidx( -1)
        end,
        {
          description = "swap with previous client by index",
          group = "client"
        }),

    awful.key({ modkey, "Control" },
        "j",
        function ()
          awful.screen.focus_relative( 1)
        end,
        {
          description = "focus the next screen",
          group = "screen"
        }),

    awful.key({ modkey, "Control" },
        "k",
        function ()
          awful.screen.focus_relative(-1)
        end,
        {
          description = "focus the previous screen",
          group = "screen"
        }),

    awful.key({ modkey, },
        "u",
        awful.client.urgent.jumpto,
        {
          description = "jump to urgent client",
          group = "client"
        }),

    awful.key({ modkey, },
        "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end,
        {
          description = "go back",
          group = "client"
        }),

    awful.key({ modkey, },
        "Return",
        function ()
          awful.spawn(terminal)
        end,
        {
          description = "open a terminal",
          group = "launcher"
        }),
          
     awful.key({ modkey, "Shift" },
        "Return",
        function ()
          awful.spawn(string.format("dmenu_run", beautiful.bg_normal, beautiful.fg_normal, beautiful.bg_focus, beautiful.fg_focus))
        end,
        {
            description = "Launches rofi",
            group = "launcher"
        }), 

    awful.key({ modkey, "Shift" },
        "s",
        function () awful.util.spawn("spotify") end,
        {
            description = "Launches spotify",
            group = "gui applications"
        }),

    awful.key({ modkey, },
        "w",
        function () awful.util.spawn(browser) end,
        {
            description = "Launches " .. browser,
            group = "gui applications"
        }),
    
    awful.key({ modkey, },
        "e",
        function () awful.util.spawn(editor) end,
        {
            description = "Launches " .. editor,
            group = "gui applications"
        }),

    awful.key({ modkey, "Control" },
        "r",
        awesome.restart,
        {
          description = "reload awesome",
          group = "awesome"
        }),

    awful.key({ modkey, "Shift" },
        "q",
        awesome.quit,
        {
          description = "quit awesome",
          group = "awesome"
        }),

    awful.key({ modkey, },
        "l",
        function ()
          awful.tag.incmwfact( 0.05)
        end,
        {
          description = "increase master width factor",
          group = "layout"
        }),

    awful.key({ modkey, },
        "h",
        function ()
          awful.tag.incmwfact(-0.05)
        end,
        {
          description = "decrease master width factor",
          group = "layout"
        }),

    awful.key({ modkey, "Shift" },
        "h",
        function ()
          awful.tag.incnmaster( 1, nil, true)
        end,
        {
          description = "increase the number of master clients",
          group = "layout"
        }),

    awful.key({ modkey, "Shift" },
        "l",
        function ()
          awful.tag.incnmaster(-1, nil, true)
        end,
        {
          description = "decrease the number of master clients",
          group = "layout"
        }),

    awful.key({ modkey, "Control" },
        "h",
        function ()
          awful.tag.incncol( 1, nil, true)
        end,
        {
          description = "increase the number of columns",
          group = "layout"
        }),

    awful.key({ modkey, "Control" },
        "l",
        function ()
          awful.tag.incncol(-1, nil, true)
        end,
        {
          description = "decrease the number of columns",
          group = "layout"
        }),

    awful.key({ modkey, },
        "space",
        function ()
          awful.layout.inc( 1)
        end,
        {
          description = "select next",
          group = "layout"
        }),

    awful.key({ modkey, "Shift" },
        "space",
        function ()
          awful.layout.inc(-1)
        end,
        {
          description = "select previous",
          group = "layout"
        }),

    awful.key({ modkey, "Control" },
        "n",
        function ()
            local c = awful.client.restore()
            -- Focus restored client
            if c then
              c:emit_signal(
                  "request::activate", "key.unminimize", {raise = true}
              )
            end
        end,
        {
          description = "restore minimized",
          group = "client"
        }),

awful.key({ modkey, },
        "F6",
        function ()
        awful.util.spawn("./.config/dmenu/scripts/dmenu-power.sh")
        end,
        {
          description = "power script",
          group = "dmenu scripts"
        }),

  awful.key({ modkey, },
        "F7",
        function ()
        awful.util.spawn("./.config/dmenu/scripts/dmenu-ssh.sh")
        end,
        {
          description = "ssh script",
          group = "dmenu scripts"
        }),

  awful.key({ modkey, },
        "F8",
        function ()
        awful.util.spawn("./.config/dmenu/scripts/dmenu-sysmon.sh")
        end,
        {
          description = "system monitor script",
          group = "dmenu scripts"
        }),

  awful.key({ modkey, },
        "F9",
        function ()
        awful.util.spawn("./.config/dmenu/scripts/dmenumount.sh")
        end,
        {
          description = "mount script",
          group = "dmenu scripts"
        }),

  awful.key({ modkey, },
        "F10",
        function ()
        awful.util.spawn("./.config/dmenu/scripts/dmenuumount.sh")
        end,
        {
          description = "unmount script",
          group = "dmenu scripts"
        }),

  awful.key({ modkey, },
        "F11",
        function ()
        awful.util.spawn("./.config/dmenu/scripts/dmenu-scrot.sh")
        end,
        {
          description = "scrot script",
          group = "dmenu scripts"
        }),

  awful.key({ modkey, },
        "F12",
        function ()
        awful.util.spawn("./.config/dmenu/scripts/dmenu-edit-configs.sh")
        end,
        {
          description = "edit configurations script",
          group = "dmenu scripts"
        }),

awful.key({ },
        "XF86AudioLowerVolume",
        function ()
        awful.util.spawn("pulsemixer --change-volume -2")
        end,
        {
          description = "lower volume",
          group = "multimedia keys"
        }),
  
awful.key({ },
        "XF86AudioRaiseVolume",
        function ()
        awful.util.spawn("pulsemixer --change-volume +2 && pulsemixer --max-volume 100")
        end,
        {
          description = "raise volume",
          group = "multimedia keys"
        }),

awful.key({ },
        "XF86AudioMute",
        function ()
        awful.util.spawn("pulsemixer --toggle-mute")
        end,
        {
          description = "toggle mute",
          group = "multimedia keys"
        }),

awful.key({ },
        "XF86AudioPlay",
        function ()
        awful.util.spawn("playerctl -p spotify play-pause")
        end,
        {
          description = "play/pause",
          group = "multimedia keys"
        }),

awful.key({ },
        "XF86AudioNext",
        function ()
        awful.util.spawn("playerctl -p spotify next")
        end,
        {
          description = "next song",
          group = "multimedia keys"
        }),

awful.key({ },
        "XF86AudioPrev",
        function ()
        awful.util.spawn("playerctl -p spotify previous")
        end,
        {
          description = "previous song",
          group = "multimedia keys"
        }),

awful.key({ },
        "XF86AudioStop",
        function ()
        awful.util.spawn("playerctl -p spotify stop")
        end,
        {
          description = "stop song",
          group = "multimedia keys"
        }),

    awful.key({ modkey }, "p", function() menubar.show() end,
              {description = "show the menubar", group = "launcher"})
)

clientkeys = gears.table.join(
    awful.key({ modkey, },
        "f",
        function (c)
            c.fullscreen = not c.fullscreen
            c:raise()
        end,
        {
          description = "toggle fullscreen",
          group = "client"
        }),
    
    awful.key({ modkey, "Shift" },
        "c",
        function (c)
          c:kill()
        end,
        {
          description = "close",
          group = "client"
        }),
    
    awful.key({ modkey, "Control" },
        "space",
        awful.client.floating.toggle,
        {
          description = "toggle floating",
          group = "client"
        }),
    
    awful.key({ modkey, "Control" },
        "Return",
        function (c)
          c:swap(awful.client.getmaster())
        end,
        {
          description = "move to master",
          group = "client"
        }),
    
    awful.key({ modkey, },
        "o",
        function (c)
          c:move_to_screen()
        end,
        {
          description = "move to screen",
          group = "client"
        }),
    
    awful.key({ modkey, },
        "t",
        function (c)
          c.ontop = not c.ontop
        end,
        {
          description = "toggle keep on top",
          group = "client"
        }),
    
    awful.key({ modkey, },
        "n",
        function (c)
            c.minimized = true
        end,
        {
          description = "minimize",
          group = "client"
        }),
    
    awful.key({ modkey, },
        "m",
        function (c)
            c.maximized = not c.maximized
            c:raise()
        end,
        {
          description = "(un)maximize",
          group = "client"
        }),
    
    awful.key({ modkey, "Control" },
        "m",
        function (c)
            c.maximized_vertical = not c.maximized_vertical
            c:raise()
        end,
        {
          description = "(un)maximize vertically",
          group = "client"
        }),
    
    awful.key({ modkey, "Shift" },
        "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c:raise()
        end,
        {
          description = "(un)maximize horizontally",
          group = "client"
        })
)

for i = 1, 9 do
    globalkeys = gears.table.join(globalkeys,
        awful.key({ modkey },
            "#" .. i + 9,
             function ()
                   local screen = awful.screen.focused()
                   local tag = screen.tags[i]
                   if tag then
                      tag:view_only()
                   end
             end,
             {
               description = "view tag #"..i,
               group = "tag"
             }),
        
        awful.key({ modkey, "Control" }, "#" .. i + 9,
        function ()
            local screen = awful.screen.focused()
            local tag = screen.tags[i]
            if tag then
               awful.tag.viewtoggle(tag)
            end
        end,
        {
          description = "toggle tag #" .. i,
          group = "tag"
        }),
        
        awful.key({ modkey, "Shift" },
            "#" .. i + 9,
            function ()
                if client.focus then
                    local tag = client.focus.screen.tags[i]
                    if tag then
                        client.focus:move_to_tag(tag)
                    end
               end
            end,
            {
              description = "move focused client to tag #"..i,
              group = "tag"
            }),
        
        awful.key({ modkey, "Control", "Shift" },
            "#" .. i + 9,
            function ()
                if client.focus then
                    local tag = client.focus.screen.tags[i]
                    if tag then
                        client.focus:toggle_tag(tag)
                    end
                end
            end,
            {
              description = "toggle focused client on tag #" .. i,
              group = "tag"
            })
    )
end

clientbuttons = gears.table.join(
    awful.button({ },
        1,
        function (c)
        c:emit_signal("request::activate", "mouse_click", {raise = true})
        end),
    
    awful.button({ modkey },
        1,
        function (c)
          c:emit_signal("request::activate", "mouse_click", {raise = true})
        awful.mouse.client.move(c)
        end),
    
    awful.button({ modkey },
        3,
        function (c)
          c:emit_signal("request::activate", "mouse_click", {raise = true})
        awful.mouse.client.resize(c)
        end)
)

root.keys(globalkeys)

-- Rules to apply to new clients (through the "manage" signal).
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     raise = true,
                     keys = clientkeys,
                     buttons = clientbuttons,
                     screen = awful.screen.preferred,
                     placement = awful.placement.no_overlap+awful.placement.no_offscreen
     }
    },

-- Floating clients.
    { rule_any = {
        instance = {
          "DTA",  -- Firefox addon DownThemAll.
          "copyq",  -- Includes session name in class.
          "pinentry",
        },
        class = {
          "Arandr",
          "Blueman-manager",
          "Gpick",
          "Kruler",
          "MessageWin",  -- kalarm.
          "Sxiv",
          "Tor Browser", -- Needs a fixed window size to avoid fingerprinting by screen size.
          "Wpa_gui",
          "veromix",
          "xtightvncviewer"},

        -- Note that the name property shown in xprop might be set slightly after creation of the client
        -- and the name shown there might not match defined rules here.
        name = {
          "Event Tester",  -- xev.
        },
        role = {
          "AlarmWindow",  -- Thunderbird's calendar.
          "ConfigManager",  -- Thunderbird's about:config.
          "pop-up",       -- e.g. Google Chrome's (detached) Developer Tools.
        }
      }, properties = { floating = true }},

-- Add titlebars to normal clients and dialogs
    { rule_any = {type = { "normal", "dialog" }
      }, properties = { titlebars_enabled = false }
    },
}

beautiful.useless_gap = 6
beautiful.gap_single_client = true

-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c)
    -- Set the windows at the slave,
    -- i.e. put it at the end of others instead of setting it master.
    -- if not awesome.startup then awful.client.setslave(c) end

    if awesome.startup
      and not c.size_hints.user_position
      and not c.size_hints.program_position then
        -- Prevent clients from being unreachable after screen count changes.
        awful.placement.no_offscreen(c)
    end
end)

-- Add a titlebar if titlebars_enabled is set to true in the rules.
client.connect_signal("request::titlebars", function(c)
    -- buttons for the titlebar
    local buttons = gears.table.join(
        awful.button({ }, 1, function()
            c:emit_signal("request::activate", "titlebar", {raise = true})
            awful.mouse.client.move(c)
        end),
        awful.button({ }, 3, function()
            c:emit_signal("request::activate", "titlebar", {raise = true})
            awful.mouse.client.resize(c)
        end)
    )

    awful.titlebar(c) : setup {
        { -- Left
            awful.titlebar.widget.iconwidget(c),
            buttons = buttons,
            layout  = wibox.layout.fixed.horizontal
        },
        { -- Middle
            { -- Title
                align  = "center",
                widget = awful.titlebar.widget.titlewidget(c)
            },
            buttons = buttons,
            layout  = wibox.layout.flex.horizontal
        },
        { -- Right
            awful.titlebar.widget.floatingbutton (c),
            awful.titlebar.widget.maximizedbutton(c),
            awful.titlebar.widget.stickybutton   (c),
            awful.titlebar.widget.ontopbutton    (c),
            awful.titlebar.widget.closebutton    (c),
            layout = wibox.layout.fixed.horizontal()
        },
        layout = wibox.layout.align.horizontal
    }
end)

-- Enable sloppy focus, so that focus follows mouse.
client.connect_signal("mouse::enter", function(c)
    c:emit_signal("request::activate", "mouse_enter", {raise = false})
end)

client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)

awful.spawn.with_shell("xset r rate 300 50 &")
awful.spawn.with_shell("xset s off -dpms &")
awful.spawn.with_shell("xrdb ~/.Xresources &")
awful.spawn.with_shell("~/.config/fixmonitors.sh &")
awful.spawn.with_shell("xmodmap ~/.Xmodmap &")
awful.spawn.with_shell("xcompmgr &")
awful.spawn.with_shell("wmname LG3D &")
awful.spawn.with_shell("/usr/bin/emacs --daemon &")
awful.spawn.with_shell("feh --bg-scale ~/.config/wallpaper &")
