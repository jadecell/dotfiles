#+TITLE: JadeCell's Xmonad and Xmobar Configs

* Colors
** Black

#+NAME: color-black
#+begin_src sh 
~/.local/bin/gethex black
#+end_src

** Red

#+NAME: color-red
#+begin_src sh
~/.local/bin/gethex red
#+end_src

** Green

#+NAME: color-green
#+begin_src sh
~/.local/bin/gethex green
#+end_src

** Yellow

#+NAME: color-yellow
#+begin_src sh
~/.local/bin/gethex yellow
#+end_src

** Blue

#+NAME: color-blue
#+begin_src sh
~/.local/bin/gethex blue
#+end_src

** Magenta

#+NAME: color-magenta
#+begin_src sh
~/.local/bin/gethex magenta
#+end_src

** Cyan

#+NAME: color-cyan
#+begin_src sh
~/.local/bin/gethex cyan
#+end_src

** White

#+NAME: color-white
#+begin_src sh
~/.local/bin/gethex lightwhite
#+end_src

** Background

#+NAME: color-background
#+begin_src sh
~/.local/bin/gethex background
#+end_src

** Forground

#+NAME: color-foreground
#+begin_src sh
~/.local/bin/gethex foreground
#+end_src

** Seperator

#+NAME: color-seperator
#+begin_src sh
~/.local/bin/gethex foreground
#+end_src

*** Module

#+NAME: module-seperator
#+begin_src haskell :noweb yes
<fc=<<color-seperator()>>> <fn=2>|</fn></fc>
#+end_src

** Trayer

#+NAME: color-trayer
#+begin_src sh 
~/.local/bin/gethex background | tr -d '#'
#+end_src

* --- Start of the xmonad config ---
* Imports
** General

All the general imports needed for operation.
#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
import XMonad
import System.IO (hPutStrLn)
import System.Exit (exitSuccess)
import qualified XMonad.StackSet as W
#+end_src

** Actions

All the action imports needed for operation.
#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
import XMonad.Actions.CopyWindow (kill1, killAllOtherCopies)
import XMonad.Actions.CycleWS (moveTo, shiftTo, WSType(..), nextScreen, prevScreen)
import XMonad.Actions.GridSelect
import XMonad.Actions.MouseResize
import XMonad.Actions.Promote
import XMonad.Actions.RotSlaves (rotSlavesDown, rotAllDown)
import XMonad.Actions.WindowGo (runOrRaise)
import XMonad.Actions.WithAll (sinkAll, killAll)
import qualified XMonad.Actions.Search as S
#+end_src

** Data

All the data imports needed for operation.
#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
import Data.Char (isSpace)
import Data.Monoid
import Data.Maybe (isJust)
import Data.Tree
import qualified Data.Map as M
#+end_src

** Hooks

All the hook imports needed for operation.
#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
import XMonad.Hooks.DynamicLog (dynamicLogWithPP, wrap, xmobarPP, xmobarColor, shorten, PP(..))
import XMonad.Hooks.EwmhDesktops  -- for some fullscreen events, also for xcomposite in obs.
import XMonad.Hooks.FadeInactive
import XMonad.Hooks.ManageDocks (avoidStruts, docksEventHook, manageDocks, ToggleStruts(..))
import XMonad.Hooks.ManageHelpers (isFullscreen, doFullFloat)
import XMonad.Hooks.ServerMode
import XMonad.Hooks.SetWMName
import XMonad.Hooks.WorkspaceHistory
#+end_src

** Layouts
*** General

All the general layout imports needed for operation.
#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
import XMonad.Layout.GridVariants (Grid(Grid))
import XMonad.Layout.SimplestFloat
import XMonad.Layout.Spiral
import XMonad.Layout.ResizableTile
import XMonad.Layout.Tabbed
import XMonad.Layout.ThreeColumns
#+end_src

*** Modifiers

All the layout modifiers imports needed for operation.
#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
import XMonad.Layout.LayoutModifier
import XMonad.Layout.LimitWindows (limitWindows, increaseLimit, decreaseLimit)
import XMonad.Layout.Magnifier
import XMonad.Layout.MultiToggle (mkToggle, single, EOT(EOT), (??))
import XMonad.Layout.MultiToggle.Instances (StdTransformers(NBFULL, MIRROR, NOBORDERS))
import XMonad.Layout.NoBorders
import XMonad.Layout.Renamed (renamed, Rename(Replace))
import XMonad.Layout.ShowWName
import XMonad.Layout.Spacing
import XMonad.Layout.WindowArranger (windowArrange, WindowArrangerMsg(..))
import qualified XMonad.Layout.ToggleLayouts as T (toggleLayouts, ToggleLayout(Toggle))
import qualified XMonad.Layout.MultiToggle as MT (Toggle(..))
#+end_src

** Prompt

All the prompt imports needed for operation.
#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
import XMonad.Prompt
import XMonad.Prompt.Input
import XMonad.Prompt.FuzzyMatch
import XMonad.Prompt.Man
import XMonad.Prompt.Pass
import XMonad.Prompt.Shell (shellPrompt)
import XMonad.Prompt.Ssh
import XMonad.Prompt.XMonad
import Control.Arrow (first)
#+end_src

** Utilities

All the utility imports needed for operation.
#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
import XMonad.Util.EZConfig (additionalKeysP)
import XMonad.Util.Run (runProcessWithInput, safeSpawn, spawnPipe)
import XMonad.Util.SpawnOnce
#+end_src

* Default Variables

All the default variables to be used in the rest of the configuration. The following table describes all the variables, what their type is, their value, and a description.

| Variable      | Type      | Value                    | Description                             |
|---------------+-----------+--------------------------+-----------------------------------------|
| myFont        | String    | Sauce Code Pro Nerd Font | Font to be used                         |
| myModMask     | KeyMask   | Mod4 (Windows Key)       | What mod key to use                     |
| myTerminal    | String    | Alacritty                | Terminal emulator                       |
| myEditor      | String    | Emacs Client             | Editor                                  |
| myGUIBrowser  | String    | Librewolf                | Web browser                             |
| myBorderWidth | Dimension | 2                        | Width of the border around the windows  |
| myNormColor   | String    | color-black              | Unfocused window color                  |
| myFocusColor  | String    | color-red                | Focuses window color                    |
| altMask       | KeyMask   | Mod1 (Alt Key)           | Define the alt key so it can used later |

#+begin_src haskell :noweb yes :tangle ~/.config/xmonad/xmonad.hs
myFont :: String
myFont = "xft:Sauce Code Pro Nerd Font:bold:size=9:antialias=true:hinting=true"

myModMask :: KeyMask
myModMask = mod4Mask       

myTerminal :: String
myTerminal = "alacritty "  

myEditor :: String
myEditor = "emacsclient -c -n -a 'emacs'"

myGUIBrowser :: String
myGUIBrowser = "librewolf" 

myBorderWidth :: Dimension
myBorderWidth = 2         

myNormColor :: String
myNormColor   = "<<color-black()>>" 

myFocusColor :: String
myFocusColor  = "<<color-red()>>" 

altMask :: KeyMask
altMask = mod1Mask        
#+end_src

* Startup Applications

Here is a list of applications to start when Xmonad is launched.

The following applications start when Xmonad does:

| Application        | Description                                                            |
|--------------------+------------------------------------------------------------------------|
| feh                | Sets the wallpaper                                                     |
| trayer             | The systemtray                                                         |
| xset s off -dpms   | Disables the screen timeout and sleeping                               |
| xset r rate 300 50 | Sets the X rate to a higher number to increase scrolling               |
| xmodmap            | Redefines some keys to swap caps lock and control to make emacs easier |
| emacs --daemon     | Starts the emacs daemon                                                |
| xrdb               | Sets the system color palette to the colors in .Xresources             |
| fixmonitors.sh     | This sets all monitors to the correct settings                         |
| dunst              | Starting the dunst notification daemon                                 |
| setWMNAME "LG3D"   | This sets the window manager's name to "LG3D" for java compatability   |

#+begin_src haskell :noweb yes :tangle ~/.config/xmonad/xmonad.hs
myStartupHook :: X ()
myStartupHook = do
          spawnOnce "feh --bg-scale /home/jackson/.config/wallpaper &"
          spawnOnce "trayer --edge top --align right --widthtype request --monitor 1 --padding 6 --SetDockType true --SetPartialStrut true --expand true --transparent true --alpha 0 --tint 0x<<color-trayer()>> --height 24 &"
          spawnOnce "xset s off -dpms &"
          spawnOnce "xset r rate 300 50 &"
          spawnOnce "xmodmap /home/jackson/.Xmodmap &"
          spawnOnce "/usr/bin/emacs --daemon &"
          spawnOnce "xrdb /home/jackson/.Xresources &"
          spawnOnce "/bin/sh /home/jackson/.config/fixmonitors.sh &"
          spawnOnce "killall dunst ; dunst &"
          setWMName "LG3D"
#+end_src

* XPConfigs
** Primary

Sets the XP config to all the correct values so it can be used in the search prompts later in the config.

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
jacksonXPConfig :: XPConfig
jacksonXPConfig = def
      { font                = myFont
      , bgColor             = "#0f0f0f"
      , fgColor             = "#50fa7b"
      , bgHLight            = "#f8f8f8"
      , fgHLight            = "#0f0f0f"
      , borderColor         = "#98971a"
      , promptBorderWidth   = 0
      , promptKeymap        = jacksonXPKeymap
      , position            = Top
--    , position            = CenteredAt { xpCenterY = 0.3, xpWidth = 0.3 }
      , height              = 24
      , historySize         = 256
      , historyFilter       = id
      , defaultText         = []
      , autoComplete        = Just 100000  -- set Just 100000 for .1 sec
      , showCompletionOnTab = False
      -- , searchPredicate     = isPrefixOf
      , searchPredicate     = fuzzyMatch
      , alwaysHighlight     = True
      , maxComplRows        = Nothing      -- set to Just 5 for 5 rows
      }
#+end_src

** Alternate

This configuration inheirits the full configured configuration but omits the autocomplete so a prompt that you may not want autocomplete with, I can use this prompt configuration instead.

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
jacksonXPConfig' :: XPConfig
jacksonXPConfig' = jacksonXPConfig
      { autoComplete        = Nothing
      }
#+end_src

* Prompts
** Search Engines

Defines all the search engine prompts and the bindings. =Note:= this does not actually bind the search engines to their keybinds but only defines what key they should be bound to for binding later in the configuration file.

| Engine     | Binding | Desription                                  |
|------------+---------+---------------------------------------------|
| DuckDuckGo | M-S-d   | Searches duckduckgo.com for the query       |
| Archwiki   | M-S-a   | Searches the archwiki at wiki.archlinux.org |
| Hoogle     | M-S-h   | Searches the Haskell Google                 |
| Thesaurus  | M-S-t   | Searches the Thesaurus                      |
| Vocabulary | M-S-v   | Searches for vocabulary words               |

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
archWiki :: S.SearchEngine

archWiki = S.searchEngine "archWiki" "https://wiki.archlinux.org/index.php?search="

searchList :: [(String, S.SearchEngine)]
searchList = [ ("d", S.duckduckgo)
             , ("a", archWiki)
             , ("h", S.hoogle)
             , ("t", S.thesaurus)
             , ("v", S.vocabulary)
             ]
#+end_src

** Prompt Lists
*** Primary

These are some other prompts other than search engines that are useful. =Note:= like in the search engine section, the prompts are not being bound here but are being bound later in the configuration file.

| Prompt | Binding | Description       |
|--------+---------+-------------------|
| man    | M-M1-m  | Search man pages  |
| ssh    | M-M1-s  | SSH to a server   |
| xmonad | M-M1-x  | The Xmonad prompt |

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
promptList :: [(String, XPConfig -> X ())]
promptList = [ ("m", manPrompt)          -- manpages prompt
             , ("s", sshPrompt)          -- ssh prompt
             , ("x", xmonadPrompt)       -- xmonad prompt
             ]
#+end_src

*** Alternate

This is for custom created prompts. =Note:= like in the search engine section, the prompts are not being bound here but are being bound later in the configuration file.

| Prompt | Binding | Description       |
|--------+---------+-------------------|
| qalc   | M-M1-c  | Calculator prompt |

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
promptList' :: [(String, XPConfig -> String -> X (), String)]
promptList' = [ ("c", calcPrompt, "qalc")         -- requires qalculate-gtk
              ]
#+end_src

** Custom Prompts

This is for programming the prompts to be listed int he Prompt List section of the configuration.

This is the code for the qalc prompt.

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
calcPrompt c ans =
    inputPrompt c (trim ans) ?+ \input ->
        liftIO(runProcessWithInput "qalc" [input] "") >>= calcPrompt c
    where
        trim  = f . f
            where f = reverse . dropWhile isSpace
#+end_src

* XPKeymap

This is the XPKeymap configuration.

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
jacksonXPKeymap :: M.Map (KeyMask,KeySym) (XP ())
jacksonXPKeymap = M.fromList $
     map (first $ (,) controlMask)   -- control + <key>
     [ (xK_z, killBefore)            -- kill line backwards
     , (xK_k, killAfter)             -- kill line forwards
     , (xK_a, startOfLine)           -- move to the beginning of the line
     , (xK_e, endOfLine)             -- move to the end of the line
     , (xK_m, deleteString Next)     -- delete a character foward
     , (xK_b, moveCursor Prev)       -- move cursor forward
     , (xK_f, moveCursor Next)       -- move cursor backward
     , (xK_BackSpace, killWord Prev) -- kill the previous word
     , (xK_y, pasteString)           -- paste a string
     , (xK_g, quit)                  -- quit out of prompt
     , (xK_bracketleft, quit)
     ]
     ++
     map (first $ (,) altMask)       -- meta key + <key>
     [ (xK_BackSpace, killWord Prev) -- kill the prev word
     , (xK_f, moveWord Next)         -- move a word forward
     , (xK_b, moveWord Prev)         -- move a word backward
     , (xK_d, killWord Next)         -- kill the next word
     , (xK_n, moveHistory W.focusUp')   -- move up thru history
     , (xK_p, moveHistory W.focusDown') -- move down thru history
     ]
     ++
     map (first $ (,) 0) -- <key>
     [ (xK_Return, setSuccess True >> setDone True)
     , (xK_KP_Enter, setSuccess True >> setDone True)
     , (xK_BackSpace, deleteString Prev)
     , (xK_Delete, deleteString Next)
     , (xK_Left, moveCursor Prev)
     , (xK_Right, moveCursor Next)
     , (xK_Home, startOfLine)
     , (xK_End, endOfLine)
     , (xK_Down, moveHistory W.focusUp')
     , (xK_Up, moveHistory W.focusDown')
     , (xK_Escape, quit)
     ]
#+end_src

* Layouts
** Spacing
*** Primary

Sets the spacing around windows.

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
mySpacing :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
mySpacing i = spacingRaw False (Border i i i i) True (Border i i i i) True
#+end_src

*** Alternate

A variation of the primary except no borders are applied if fewer than two windows. So a single window has no gaps.

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
mySpacing' :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
mySpacing' i = spacingRaw True (Border i i i i) True (Border i i i i) True
#+end_src

** Modifications

Modifies what tall and floats mean. This adds the spacing around windows, how many windows are allowed on a single workspace and all the geometry.

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
tall     = renamed [Replace "tall"]
           $ limitWindows 12
           $ mySpacing 6
           $ ResizableTall 1 (3/100) (1/2) []
floats   = renamed [Replace "floats"]
           $ limitWindows 20 simplestFloat
#+end_src

** ShowWNameTheme

The show window name theme configuration.

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
myShowWNameTheme :: SWNConfig
myShowWNameTheme = def
    { swn_font              = "xft:Sans:bold:size=60"
    , swn_fade              = 1.0
    , swn_bgcolor           = "#000000"
    , swn_color             = "#FFFFFF"
    }
#+end_src

** Layout Hook

Sets what layouts are availiable for use by Xmonad. The following layouts are set to be used by keybindings:

    - Master / Stack
    - Floating

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
myLayoutHook = avoidStruts $ mouseResize $ windowArrange $ T.toggleLayouts floats $
               mkToggle (NBFULL ?? NOBORDERS ?? EOT) myDefaultLayout
             where
               myDefaultLayout =     tall
                                 ||| floats
#+end_src

* Xmobar Escape

The xmobar escape configuration.

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
xmobarEscape :: String -> String
xmobarEscape = concatMap doubleLts
  where
        doubleLts '<' = "<<"
        doubleLts x   = [x]
#+end_src

* Workspaces

Sets all the workspace configuration. Sets what the workspaces are named, how they are ordered, and if they are clickable. =Note:= for clicking to work, the following package is needed: "/xdo/".

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
myWorkspaces :: [String]
myWorkspaces = clickable . (map xmobarEscape)
               $ ["1", "2", "3", "4", "5", "6", "7", "8", "9"]
  where
        clickable l = [ "<action=xdotool key super+" ++ show (n) ++ "> " ++ ws ++ " </action>" |
                      (i,ws) <- zip [1..9] l,
                      let n = i ]
#+end_src

* Hooks
** Manage

Sets the manage hook for window rules.

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
myManageHook :: XMonad.Query (Data.Monoid.Endo WindowSet)
myManageHook = composeAll
     -- using 'doShift ( myWorkspaces !! 7)' sends program to workspace 8!
     -- I'm doing it this way because otherwise I would have to write out
     -- the full name of my workspaces.
     [ (className =? "firefox" <&&> resource =? "Dialog") --> doFloat  -- Float Firefox Dialog
     ]
#+end_src

** Log

The log hook for fade amounts.

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
myLogHook :: X ()
myLogHook = fadeInactiveLogHook fadeAmount
    where fadeAmount = 1.0
#+end_src

* Key Bindings

Starts the key bindings array.

What the letters mean:

| Symbol | Description |
|--------+-------------|
| M      | Modkey      |
| S      | Shift       |
| C      | Control     |
| M1     | Alt         |

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
myKeys :: [(String, X ())]
myKeys =
#+end_src

** Xmonad

General Xmonad-related keybindings.

| Key Binding | Description              |
|-------------+--------------------------|
| M-C-r       | Recompile Xmonad         |
| M-S-r       | Restart Xmonad           |
| M-S-q       | Quits the Xmonad session |

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
        [ ("M-C-r", spawn "xmonad --recompile")      
        , ("M-S-r", spawn "xmonad --restart")       
        , ("M-S-q", spawn "~/.config/dmenu/scripts/dmenu-prompt.sh 'Quit XMonad?' 'killall xinit'")
#+end_src

** Personal Applications

Launches all my custom applications.

| Key Binding | Description                                                                 |
|-------------+-----------------------------------------------------------------------------|
| M-Enter     | Spawn the terminal defined in the default variables section                 |
| M-w         | Spawn the browser defined in the default variables section                  |
| M-S-s       | Spawn spotify                                                               |
| M-u         | Spawn a terminal to update the system                                       |
| M-m         | Spawn a terminal and launch neomutt                                         |
| M-r         | Spawn a terminal and launch ranger                                          |
| M-S-w       | Spawn the simple terminal (st) and launch ranger on my wallpapers directory |

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
        , ("M-<Return>", spawn myTerminal)
        , ("M-w", spawn myGUIBrowser)
        , ("M-S-s", spawn "spotify")
        , ("M-u", spawn (myTerminal ++ "-e paru -Syu"))
        , ("M-m", spawn (myTerminal ++ "-e neomutt"))
        , ("M-r", spawn "st -e ranger")
        , ("M-S-w", spawn "st -e ranger ~/.local/repos/wallpapers")
#+end_src

** Prompts

Prompt keybindings.

| Key Binding | Description                                                           |
|-------------+-----------------------------------------------------------------------|
| M-S-Enter   | Launches a prompt to fuzzy find and launch applications (like dmenu). |

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
        , ("M-S-<Return>", shellPrompt jacksonXPConfig)   
#+end_src

** Windows

Window modifications.

| Key Binding | Description              |
|-------------+--------------------------|
| M-S-c       | Kills the focused window |

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
        , ("M-S-c", kill1)                           
#+end_src

*** Floating

Floating window modifications.

| Key Binding | Description                                 |
|-------------+---------------------------------------------|
| M-f         | Toggles floating mode of the focused window |
| M-Delete    | Set the floating window to tiling           |
| M-S-Delete  | Set all floating windows to tiling          |

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
        , ("M-f", sendMessage (T.Toggle "floats"))       
        , ("M-<Delete>", withFocused $ windows . W.sink) 
        , ("M-S-<Delete>", sinkAll)                      
#+end_src

*** Navigation

Window navigation.

| Key Binding | Description                                                     |
|-------------+-----------------------------------------------------------------|
| M-j         | Focus the next window                                           |
| M-k         | Focus the previous window                                       |
| M-S-j       | Swap focused window with the next window                        |
| M-S-k       | Swap focused window with the previous window                    |
| M-Backspace | Moves focused window to master and maintain the order of others |
| M1-S-Tab    | Rotate all windows except master and keep focus in place        |
| M1-C-Tab    | Rotate all the windows in the current stack                     |

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
        , ("M-j", windows W.focusDown)       
        , ("M-k", windows W.focusUp)        
        , ("M-S-j", windows W.swapDown)    
        , ("M-S-k", windows W.swapUp)     
        , ("M-<Backspace>", promote)     
        , ("M1-S-<Tab>", rotSlavesDown) 
        , ("M1-C-<Tab>", rotAllDown)   
#+end_src

** Layouts

Layout bindings.

| Key Binding     | Description                                   |
|-----------------+-----------------------------------------------|
| M-tab           | Switches to the next layout                   |
| M-C-M1-Up       | Arrange windows up                            |
| M-C-M1-Down     | Arrange windows down                          |
| M-Space         | Toggles the focused window to full screen     |
| M-S-Space       | Toggle struts                                 |
| M-S-n           | Toggle noborder                               |
| M-KP_Multiply   | Increase number of clients in the master pane |
| M-KP_Divide     | Decrease number of clients in the master pane |
| M-S-KP_Multiply | Increase number of windows                    |
| M-S-KP_Divide   | Decrease number of windows                    |
| M-h             | Shrink horizontal window                      |
| M-l             | Expand horizontal window                      |

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
        , ("M-<Tab>", sendMessage NextLayout)  
        , ("M-C-M1-<Up>", sendMessage Arrange)
        , ("M-C-M1-<Down>", sendMessage DeArrange)
        , ("M-<Space>", sendMessage (MT.Toggle NBFULL) >> sendMessage ToggleStruts)
        , ("M-S-<Space>", sendMessage ToggleStruts)     
        , ("M-S-n", sendMessage $ MT.Toggle NOBORDERS) 
        , ("M-<KP_Multiply>", sendMessage (IncMasterN 1))
        , ("M-<KP_Divide>", sendMessage (IncMasterN (-1)))
        , ("M-S-<KP_Multiply>", increaseLimit)          
        , ("M-S-<KP_Divide>", decreaseLimit)           
        , ("M-h", sendMessage Shrink)     
        , ("M-l", sendMessage Expand)    
#+end_src

** Workspaces

Workspace bindings.

| Key Binding | Description                      |
|-------------+----------------------------------|
| M-.         | Switch focus to next monitor     |
| M-,         | Switch focus to previous monitor |

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
        , ("M-.", nextScreen)  -- Switch focus to next monitor
        , ("M-,", prevScreen)  -- Switch focus to prev monitor
#+end_src

** Dmenu Scripts

Dmenu script bindings.

| Key Binding | Description                |
|-------------+----------------------------|
| M-C-p       | Power prompt               |
| M-C-t       | Timer prompt               |
| M-C-s       | SSH prompt                 |
| M-C-y       | System monitor prompt      |
| M-C-m       | Mount prompt               |
| M-C-S-m     | Unmount prompt             |
| M-C-e       | Edit configurations prompt |
| M-C-c       | Calculator prompt          |
| M-C-S-s     | Scrot prompt               |
| M-C-u       | Emoji/Unicode prompt       |

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
        , ("M-C-p", spawn "/bin/sh ~/.config/dmenu/scripts/dmenu-power.sh")
        , ("M-C-t", spawn "/bin/sh ~/.config/dmenu/scripts/dmenu-timer.sh")
        , ("M-C-s", spawn "/bin/sh ~/.config/dmenu/scripts/dmenu-ssh.sh")
        , ("M-C-y", spawn "/bin/sh ~/.config/dmenu/scripts/dmenu-sysmon.sh")
        , ("M-C-m", spawn "/bin/sh ~/.config/dmenu/scripts/dmenu-mount.sh")
        , ("M-C-S-m", spawn "/bin/sh ~/.config/dmenu/scripts/dmenu-umount.sh")
        , ("M-C-e", spawn "/bin/sh ~/.config/dmenu/scripts/dmenu-edit-configs.sh")
        , ("M-C-c", spawn "/bin/sh ~/.config/dmenu/scripts/dmenu-calc.sh")
        , ("M-C-S-s", spawn "/bin/sh ~/.config/dmenu/scripts/dmenu-scrot.sh")
        , ("M-C-u", spawn "/bin/sh ~/.config/dmenu/scripts/dmenu-unicode.sh")
#+end_src

** Emacs

Emacs and emacs applications bindings.

| Key Binding | Description                   |
|-------------+-------------------------------|
| C-e e       | Launch an emacs client        |
| C-e b       | Launch a list of open buffers |
| C-e d       | Launch dired                  |
| C-e n       | Launch elfeed                 |
| C-e s       | Launch the eshell             |

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
        , ("C-e e", spawn "emacsclient -c -a 'emacs'")       
        , ("C-e b", spawn "emacsclient -c -a 'emacs' --eval '(ibuffer)'") 
        , ("C-e d", spawn "emacsclient -c -a 'emacs' --eval '(dired nil)'")
        , ("C-e n", spawn "emacsclient -c -a 'emacs' --eval '(elfeed)'")  
        , ("C-e s", spawn "emacsclient -c -a 'emacs' --eval '(eshell)'") 
#+end_src

** Multimedia keys

Sets the multimedia keys to their bindings.

| Key Binding | Description                                         |
|-------------+-----------------------------------------------------|
| Mute        | Toggles the mute of the audio source                |
| LowerVolume | Lower the volume by 2 of the audio source           |
| RaiseVolume | Raise the volume by 2 and set the max volume to 100 |
| Play        | Toggle play/pause on spotify                        |
| Stop        | Stops all music on spotify                          |
| Prev        | Go to the previous song on spotify                  |
| Next        | Skip to the next song on spotify                    |

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
        , ("<XF86AudioMute>",   spawn "pulsemixer --toggle-mute")
        , ("<XF86AudioLowerVolume>", spawn "pulsemixer --change-volume -2")
        , ("<XF86AudioRaiseVolume>", spawn "pulsemixer --change-volume +2 && pulsemixer --max-volume 100")
        , ("<XF86AudioPlay>", spawn "playerctl -p spotify play-pause")
        , ("<XF86AudioStop>", spawn "playerctl -p spotify stop")
        , ("<XF86AudioPrev>", spawn "playerctl -p spotify previous")
        , ("<XF86AudioNext>", spawn "playerctl -p spotify next")
        ]
#+end_src

** Prompts

Assigns the keybindings listed in the prompt sections to their keybindings.

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
          ++ [("M-S-" ++ k, S.promptSearch jacksonXPConfig' f) | (k,f) <- searchList ]
        -- ++ [("M-S-s-" ++ k, S.selectSearch f) | (k,f) <- searchList ]
#+end_src

* Main Function

Starts the main function call.

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
main :: IO ()
main = do
#+end_src

** Launch Bars

Launches all the xmobar sessions for each of the monitors with their respective configurations.

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
    xmproc0 <- spawnPipe "xmobar -x 0 /home/jackson/.config/xmobar/xmobarrc0"
    xmproc1 <- spawnPipe "xmobar -x 1 /home/jackson/.config/xmobar/xmobarrc1"
    xmproc2 <- spawnPipe "xmobar -x 2 /home/jackson/.config/xmobar/xmobarrc2"
#+end_src

** The Xmonad Function Call

Calls the xmonad function with all the settings listed in the configuration file.

#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
    xmonad $ ewmh def
        { manageHook = ( isFullscreen --> doFullFloat ) <+> myManageHook <+> manageDocks
        -- Run xmonad commands from command line with "xmonadctl command". Commands include:
        -- shrink, expand, next-layout, default-layout, restart-wm, xterm, kill, refresh, run,
        -- focus-up, focus-down, swap-up, swap-down, swap-master, sink, quit-wm. You can run
        -- "xmonadctl 0" to generate full list of commands written to ~/.xsession-errors.
#+end_src

** Sets The Variables To Be Used

Sets all the variables that xmonad will use.

#+Begin_src haskell :tangle ~/.config/xmonad/xmonad.hs
    -- Launching three instances of xmobar on their monitors.
    -- the xmonad, ya know...what the WM is named after!
        , handleEventHook    = serverModeEventHookCmd
                               <+> serverModeEventHook
                               <+> serverModeEventHookF "XMONAD_PRINT" (io . putStrLn)
                               <+> docksEventHook
        , modMask            = myModMask
        , terminal           = myTerminal
        , startupHook        = myStartupHook
        , layoutHook         = myLayoutHook
        , workspaces         = myWorkspaces
        , borderWidth        = myBorderWidth
        , normalBorderColor  = myNormColor
        , focusedBorderColor = myFocusColor
#+end_src

** Log Hook

Sets up xmobar's settings so all the colors are correct and the order.

| Variable          | Description                       |
|-------------------+-----------------------------------|
| ppCurrent         | Current workspace                 |
| ppVisible         | Visible but not current workspace |
| ppHidden          | Hidden workspaces                 |
| ppHiddenNoWindows | Hidden workspaces (no windows)    |
| ppTitle           | Title of active window            |
| ppSep             | Separators                        |
| ppUrgent          | Urgent workspace                  |
| ppOrder           | Order of the stdout               |

#+begin_src haskell :noweb yes :tangle ~/.config/xmonad/xmonad.hs
        , logHook = workspaceHistoryHook <+> myLogHook <+> dynamicLogWithPP xmobarPP
                        { ppOutput = \x -> hPutStrLn xmproc0 x >> hPutStrLn xmproc1 x >> hPutStrLn xmproc2 x
                        , ppCurrent = xmobarColor "<<color-blue()>>" "" . wrap "[" "]"
                        , ppVisible = xmobarColor "<<color-magenta()>>" ""
                        , ppHidden = xmobarColor "<<color-green()>>" "" . wrap "*" ""
                        , ppHiddenNoWindows = xmobarColor "<<color-white()>>" ""
                        , ppTitle = xmobarColor "<<color-red()>>" "" . shorten 60 
                        , ppSep =  "<<module-seperator>> "
                        , ppUrgent = xmobarColor "<<color-red()>>" "" . wrap "!" "!"
                        , ppOrder  = \(ws:l:t) -> [ws]++t
                        }
        } `additionalKeysP` myKeys
#+end_src

* --- End of the xmonad config ---
* Xmobar

Xmobar configurations.

** Fonts
*** Primary

#+NAME: font-primary
#+begin_src haskell
"xft:Ubuntu:weight=bold:pixelsize=13:antialias=true:hinting=true"
#+end_src

*** Alternate

#+NAME: font-alt1
#+begin_src haskell
"xft:Sauce Code Pro Nerd Font:weight=bold:pixelsize=13:antialias=true:hinting=true"
#+end_src

#+NAME: font-alt2
#+begin_src haskell
"xft:Sauce Code Pro Nerd Font:weight=bold:pixelsize=16:antialias=true:hinting=true"
#+end_src

#+NAME: font-alt3
#+begin_src haskell
"xft:FontAwesome:pixelsize=13"
#+end_src

** Modules
*** Kernel

#+NAME: module-kernel
#+begin_src haskell :noweb yes
<fc=<<color-yellow()>>><fn=2> </fn>%uname%</fc>
#+end_src

**** Command

#+NAME: command-kernel
#+begin_src haskell
Run Com "uname" ["-r"] "" 3600
#+end_src

*** Cpu

#+NAME: module-cpu
#+begin_src haskell :noweb yes
<fc=<<color-red()>>> %cpu% </fc>
#+end_src

**** Command

#+NAME: command-cpu
#+begin_src haskell
Run Cpu ["-t", "<fn=1>\xf108 </fn> <total>%","-H","100","--high","red"] 20
#+end_src

*** Memory

#+NAME: module-memory
#+begin_src haskell :noweb yes
<fc=<<color-blue()>>><fn=1> %memory% </fn></fc>
#+end_src

**** Command

#+NAME: command-memory
#+begin_src haskell
Run Com "/home/jackson/.local/bin/memory" [] "" 1
#+end_src

*** Disk Usage

#+NAME: module-diskusage
#+begin_src haskell :noweb yes
<fc=<<color-magenta()>>>  %disku%  </fc>
#+end_src

**** Command

#+NAME: command-diskusage
#+begin_src haskell
Run DiskU [("/", "<fn=1>\xf0c7 </fn> <free> free")] [] 60
#+end_src

*** Volume

#+NAME: module-volume
#+begin_src haskell :noweb yes
<fc=<<color-blue()>>> <fn=1> %volume% </fn> </fc>
#+end_src

**** Command

#+NAME: command-volume
#+begin_src haskell
Run Com "/home/jackson/.local/bin/volume" [] "" 1
#+end_src

*** Uptime

#+NAME: module-uptime
#+begin_src haskell :noweb yes
<fc=<<color-green()>>>  %uptime%  </fc>
#+end_src

**** Command

#+NAME: command-uptime
#+begin_src haskell
Run Uptime ["-t", "<fn=1>\xf062 </fn> <hours>h <minutes>m"] 60
#+end_src

*** Date

#+NAME: module-date
#+begin_src haskell :noweb yes
<fc=<<color-cyan()>>> %date% </fc>
#+end_src

**** Command

#+NAME: command-date
#+begin_src haskell
Run Date "<fn=1>\xf133 </fn> %b %d %Y (%H:%M:%S)" "date" 1
#+end_src

*** Corona

#+NAME: module-corona
#+begin_src haskell :noweb yes
<fc=<<color-green()>>> <fn=1>%corona%</fn> </fc>
#+end_src

**** Command

#+NAME: command-corona
#+begin_src haskell :noweb yes
Run Com "/home/jackson/.local/bin/corona" [] "" 1
#+end_src

*** Weather

#+NAME: module-weather
#+begin_src haskell :noweb yes
<fc=<<color-yellow()>>><fn=1> %weather% </fn></fc>
#+end_src

**** Command

#+NAME: command-weather
#+begin_src haskell :noweb yes
Run Com "/home/jackson/.local/bin/weather" [] "" 1800
#+end_src

*** Cpu Temperature

#+NAME: module-cputemp
#+begin_src haskell :noweb yes
<fc=<<color-red()>>><fn=1> %cputemp% </fn> </fc>
#+end_src

**** Command

#+NAME: command-cputemp
#+begin_src haskell :noweb yes
Run Com "/home/jackson/.local/bin/cputemp" [] "" 10
#+end_src

*** Pacman Updates

#+NAME: module-pacupdates
#+begin_src haskell :noweb yes
<fc=<<color-magenta()>>><fn=1>  </fn> %pacupdate% </fc>
#+end_src

**** Command

#+NAME: command-pacupdates
#+begin_src haskell :noweb yes
Run Com "/home/jackson/.local/bin/pacupdate" [] "" 300
#+end_src
 
*** Battery

#+NAME: module-battery
#+begin_src haskell :noweb yes
<fc=<<color-green()>>><fn=1> %battery% </fn> </fc>
#+end_src

**** Command

#+NAME: command-battery
#+begin_src haskell :noweb yes
Run Com "/home/jackson/.local/bin/battery" [] "" 2
#+end_src

*** System Tray

#+NAME: module-systray
#+begin_src haskell :noweb yes
%trayerpad%
#+end_src

**** Command

#+NAME: command-systray
#+begin_src haskell :noweb yes
Run Com "/home/jackson/.config/xmobar/trayer-padding-icon.sh" [] "trayerpad" 1
#+end_src

*** UnsafeSTDINReader

#+NAME: module-unsafestdinreader
#+begin_src haskell :noweb yes
%UnsafeStdinReader%
#+end_src

**** Command

#+NAME: command-unsafestdinreader
#+begin_src haskell :noweb yes
Run UnsafeStdinReader
#+end_src

** Icons

#+NAME: xpm-icon-root
#+begin_src haskell
"/home/jackson/.xmonad/xpm/"
#+end_src

** Computers
*** Desktop
**** Monitor 1

The configuration for monitor 1.

#+begin_src haskell :noweb yes :tangle ~/.config/xmobar/xmobarrc0
Config { font    = <<font-primary>>
       , additionalFonts = [ <<font-alt1>>
                           , <<font-alt2>>
                           , <<font-alt3>>
                           ]
       , bgColor = "<<color-background()>>"
       , fgColor = "<<color-foreground()>>"
       , position = Static { xpos = 0 , ypos = 0, width = 1920, height = 24 }
       , lowerOnStart = True
       , hideOnStart = False
       , allDesktops = True
       , persistent = True
       , iconRoot = <<xpm-icon-root>>
       , commands = [
                      <<command-date>>
                    , <<command-uptime>>
                    , <<command-cpu>>
                    , <<command-diskusage>>
                    , <<command-kernel>>
                    , <<command-memory>>
                    , <<command-volume>>
                    , <<command-unsafestdinreader>>
                    ]
       , sepChar = "%"
       , alignSep = "}{"
       , template = " <<module-unsafestdinreader>> }{ <<module-kernel>> <<module-seperator>> <<module-cpu>> <<module-seperator>> <<module-memory>> <<module-seperator>> <<module-diskusage>> <<module-seperator>> <<module-volume>> <<module-seperator>> <<module-uptime>> <<module-seperator>> <<module-date>> "
       }
#+end_src

**** Monitor 2

The configuration for monitor 2.

#+begin_src haskell :noweb yes :tangle ~/.config/xmobar/xmobarrc1
Config { font    = <<font-primary>>
       , additionalFonts = [ <<font-alt1>>
                           , <<font-alt2>>
                           , <<font-alt3>>
                           ]
       , bgColor = "<<color-background()>>"
       , fgColor = "<<color-foreground()>>"
       , position = Static { xpos = 1920 , ypos = 0, width = 1920, height = 24 }
       , lowerOnStart = True
       , hideOnStart = False
       , allDesktops = True
       , persistent = True
       , iconRoot = <<xpm-icon-root>>  -- default: "."
       , commands = [
                      <<command-date>>
                    , <<command-uptime>>
                    , <<command-kernel>>
                    , <<command-cpu>>
                    , <<command-diskusage>>
                    , <<command-kernel>>
                    , <<command-volume>>
                    , <<command-memory>>
                    , <<command-cputemp>>
                    , <<command-systray>>
                    , <<command-pacupdates>>
                    , <<command-unsafestdinreader>>
                    ]
       , sepChar = "%"
       , alignSep = "}{"
       , template = " <<module-unsafestdinreader>> }{ <<>> <<>> <<module-cpu>> <<module-seperator>> <<module-memory>> <<module-seperator>> <<module-pacupdates>> <<module-seperator>> <<module-volume>> <<module-seperator>> <<module-cputemp>> <<module-seperator>> <<module-uptime>> <<module-seperator>> <<module-date>> <<module-seperator>> <<module-systray>>"
       }
#+end_src

**** Monitor 3

The configuration for monitor 3.

#+begin_src haskell :noweb yes :tangle ~/.config/xmobar/xmobarrc2
Config { font    = <<font-primary>>
       , additionalFonts = [ <<font-alt1>>
                           , <<font-alt2>>
                           , <<font-alt3>>
                           ]
       , bgColor = "<<color-background()>>"
       , fgColor = "<<color-foreground()>>"
       , position = Static { xpos = 3840 , ypos = 0, width = 1920, height = 24 }
       , lowerOnStart = True
       , hideOnStart = False
       , allDesktops = True
       , persistent = True
       , iconRoot = <<xpm-icon-root>>  -- default: "."
       , commands = [
                      <<command-date>>
                    , <<command-uptime>>
                    , <<command-cpu>>
                    , <<command-diskusage>>
                    , <<command-kernel>>
                    , <<command-volume>>
                    , <<command-memory>>
                    , <<command-corona>>
                    , <<command-unsafestdinreader>>
                    ]
       , sepChar = "%"
       , alignSep = "}{"
       , template = " <<module-unsafestdinreader>> }{ <<module-kernel>> <<module-seperator>> <<module-cpu>> <<module-seperator>> <<module-memory>> <<module-seperator>> <<module-diskusage>> <<module-seperator>> <<module-volume>> <<module-seperator>> <<module-corona>> <<module-seperator>> <<module-date>> "
       }
#+end_src
*** Laptop
**** Monitor 1

The configuration for monitor 1.

#+begin_src haskell :noweb yes :tangle ~/.config/xmobar/xmobarrc_laptop
Config { font    = <<font-primary>>
       , additionalFonts = [ <<font-alt1>>
                           , <<font-alt2>>
                           , <<font-alt3>>
                           ]
       , bgColor = "<<color-background()>>"
       , fgColor = "<<color-foreground()>>"
       , position = Static { xpos = 0 , ypos = 0, width = 1920, height = 24 }
       , lowerOnStart = True
       , hideOnStart = False
       , allDesktops = True
       , persistent = True
       , iconRoot = <<xpm-icon-root>>
       , commands = [
                      <<command-date>>
                    , <<command-cpu>>
                    , <<command-battery>>
                    , <<command-kernel>>
                    , <<command-memory>>
                    , <<command-weather>>
                    , <<command-volume>>
                    , <<command-systray>>
                    , <<command-unsafestdinreader>>
                    ]
       , sepChar = "%"
       , alignSep = "}{"
       , template = " <<module-unsafestdinreader>> }{ <<module-kernel>> <<module-seperator>> <<module-cpu>> <<module-seperator>> <<module-memory>> <<module-seperator>> <<module-battery>> <<module-seperator>> <<module-volume>> <<module-seperator>> <<module-weather>> <<module-seperator>> <<module-date>> <<module-seperator>> <<module-systray>> "
       }
#+end_src


