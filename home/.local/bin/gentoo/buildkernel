#!/usr/bin/env sh

# Run the current script as root with all the arguments if not already being ran as root
if [ "$(id -u)" -ne "0" ]; then exec sudo "$0" "$@"; fi

CPUTHREADS=$(grep -c processor /proc/cpuinfo)
CPUTHREADSPLUSONE=$((CPUTHREADS + 1))
KERNELCONFIGLOCATION="/usr/src/linux/.config"
KERNELCONFIGDIRECTORY="$(echo $KERNELCONFIGLOCATION | cut -d'.' -f1)"
KERNELCONFIGDESTINATION="/home/jackson/.local/repos/dotfiles/extra/kernelconfigs"
NEWKERNELVERSION="$(eselect kernel list | tail -1 | cut -d'-' -f2)"
CURRENTKERNELVERSION="$(uname -r | tr '-' ' ' | cut -d' ' -f1)"

if [ "$NEWKERNELVERSION" != "$CURRENTKERNELVERSION" ]; then
    eselect kernel set "linux-$NEWKERNELVERSION-gentoo"
    cd "$KERNELCONFIGDIRECTORY" || exit 1
    make mrproper
    cp "$KERNELCONFIGDESTINATION/$CURRENTKERNELVERSION-gentoo-$(hostname).config" "$KERNELCONFIGLOCATION"
    make olddefconfig
fi

cd "$KERNELCONFIGDIRECTORY" && make menuconfig

clear
printf "Want to build the newly configured kernel [Y/n]? "
read -r BUILDNEWKERNEL

case $BUILDNEWKERNEL in
    Y | y)
        SWITCHBUILDKERNEL=true
        ;;
    N | n)
        SWITCHBUILDKERNEL=false
        ;;
    "")
        SWITCHBUILDKERNEL=true
        ;;
    *)
        echo "Invalid option"
        exit 1
        ;;
esac

$SWITCHBUILDKERNEL && make -j$CPUTHREADSPLUSONE && make modules_install install && genkernel --install --kernel-config=$KERNELCONFIGLOCATION initramfs

BUILTKERNELVERSION="$(grep 'Linux/x86' $KERNELCONFIGLOCATION | tr '-' ' ' | cut -d' ' -f3)"
cp -f $KERNELCONFIGLOCATION "${KERNELCONFIGDESTINATION}/${BUILTKERNELVERSION}-gentoo-$(hostname).config"

clear
printf "Want to remove duplicate kernel image [Y/n]? "
read -r REMOVEDUPLICATEIMAGE

case $REMOVEDUPLICATEIMAGE in
    Y | y)
        SWITCHREMOVEKERNELIMAGES=true
        ;;
    N | n)
        SWITCHREMOVEKERNELIMAGES=false
        ;;
    "")
        SWITCHREMOVEKERNELIMAGES=true
        ;;
    *)
        echo "Invalid option"
        exit 1
        ;;
esac

$SWITCHREMOVEKERNELIMAGES && rm -f /boot/*.old

clear
printf "Want to re-build modules [Y/n]? "
read -r REBUILDMODULES

case $REBUILDMODULES in
    Y | y)
        SWITCHREBUILDMODULES=true
        ;;
    N | n)
        SWITCHREBUILDMODULES=false
        ;;
    "")
        SWITCHREBUILDMODULES=true
        ;;
    *)
        echo "Invalid option"
        exit 1
        ;;
esac

$SWITCHREBUILDMODULES && emerge @module-rebuild

if [ "$(find /boot -name 'vmlinuz*' | wc -l)" -gt "1" ]; then
    clear
    printf "Want to remove old kernel files in /boot [Y/n]? "
    read -r REMOVEOLDKERNELFILES

    case $REMOVEOLDKERNELFILES in
        Y | y)
            SWITCHOLDKERNELFILESREMOVE=true
            ;;
        N | n)
            SWITCHOLDKERNELFILESREMOVE=false
            ;;
        "")
            SWITCHOLDKERNELFILESREMOVE=true
            ;;
        *)
            echo "Invalid option"
            exit 1
            ;;
    esac

    $SWITCHOLDKERNELFILESREMOVE && rm -f /boot/*"$CURRENTKERNELVERSION"*

    clear
    printf "Want to remove the old kernel's ebuild [Y/n]? "
    read -r REMOVEOLDKERNELEBUILD

    case $REMOVEOLDKERNELEBUILD in
        Y | y)
            SWITCHREMOVEOLDKERNELBUILD=true
            ;;
        N | n)
            SWITCHREMOVEOLDKERNELBUILD=false
            ;;
        "")
            SWITCHREMOVEOLDKERNELBUILD=true
            ;;
        *)
            echo "Invalid option"
            exit 1
            ;;
    esac

    $SWITCHREMOVEOLDKERNELBUILD && emerge -c "=sys-kernel/gentoo-sources-$CURRENTKERNELVERSION"
fi

clear
printf "Re-generate grub config [Y/n]? "
read -r GRUBCONFIG

case $GRUBCONFIG in
    Y | y)
        SWITCHGRUBCONFIG=true
        ;;
    N | n)
        SWITCHGRUBCONFIG=false
        ;;
    "")
        SWITCHGRUBCONFIG=true
        ;;
    *)
        echo "Invalid option"
        exit 1
        ;;
esac

$SWITCHGRUBCONFIG && grub-mkconfig -o /boot/grub/grub.cfg

clear
printf "Reboot now [Y/n]? "
read -r REBOOTNOW

case $REBOOTNOW in
    Y | y)
        SWITCHREBOOTNOW=true
        ;;
    N | n)
        SWITCHREBOOTNOW=false
        ;;
    "")
        SWITCHREBOOTNOW=true
        ;;
    *)
        echo "Invalid option"
        exit 1
        ;;
esac

$SWITCHREBOOTNOW && reboot
