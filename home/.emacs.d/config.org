#+TITLE: JadeCell's GNU Emacs Config
#+DESCRIPTION: JadeCell's personal Emacs config.
#+STARTUP: overview

* About This Config

This is my configuration tuned to my needs as a computer science student. There arfe various plugins, language servers, and more. I try to do as much stuff I can in emacs and sometimes I can not do that. I love emacs because it is very extensible. I hope to learn emacs more and more overtime.

* Setup package.el to work with MELPA

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives
 '("melpa" . "https://melpa.org/packages/"))
    (package-refresh-contents)
(package-initialize)
#+end_src

** Installing use-package

#+begin_src emacs-lisp
    (unless (package-installed-p 'use-package)
     (package-install 'use-package))
#+end_src

** All The Icons
    This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.

#+begin_src emacs-lisp
    (use-package all-the-icons
     :ensure t)
#+end_src

* General Keybindings
    General.el allows us to set keybindings.  As a longtime Doom Emacs user, I have grown accustomed to using SPC as the prefix key.  It certainly is easier on the hands than constantly using CTRL for a prefix.

#+begin_src emacs-lisp
(use-package general
  :ensure t  ;; install general if not installed
  :config
  (general-evil-setup t))

(nvmap :prefix "SPC"
"SPC"   '(counsel-M-x :which-key "M-x")
"."     '(find-file :which-key "Find file")
";"     '(pp-eval-expression :which-key "Eval Expression")
"`"     '(evil-switch-to-windows-last-buffer :which-key "Last Buffer")

;; Buffers
"b"     '(:ignore t :which-key "buffer")
"b b"   '(ibuffer :which-key "Ibuffer")
"b k"   '(kill-current-buffer :which-key "Kill current buffer")
"b n"   '(next-buffer :which-key "Next buffer")
"b p"   '(previous-buffer :which-key "Previous buffer")
"b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
"b K"   '(kill-buffer :which-key "Kill buffer")

;; Eshell
"e"     '(:ignore t :which-key "eshell")
"e h"   '(counsel-esh-history :which-key "Eshell history")
"e s"   '(eshell :which-key "Eshell")
"f r"   '(counsel-recentf :which-key "Recent files")

;; Toggles
"t"     '(:ignore t :which-key "toggles")
"t t"   '(toggle-truncate-lines :which-key "Toggle truncate lines")

;; Files
"f"     '(:ignore t :which-key "file")
"f f"   '(counsel-find-file :which-key "Find File")
"f l"   '(counsel-locate :which-key "Locate File")
"f r"   '(counsel-recentf :which-key "Recent File")
"f s"   '(save-buffer :which-key "Save File")
"f S"   '(write-file :which-key "Save File As")

;; Windows
"w"     '(:ignore t :which-key "window")
"w +"   '(evil-window-increase-height :which-key "Window Increase Height")
"w -"   '(evil-window-decrease-height :which-key "Window Decrease Height")
"w <"   '(evil-window-decrease-width  :which-key "Window Decrease Width")
"w >"   '(evil-window-increase-width  :which-key "Window Increase Width")
"w ="   '(balance-windows :which-key "Balance Window")
"w _"   '(evil-window-set-height :which-key "Window Set Height")
"w |"   '(evil-window-set-width :which-key "Window Set Width")
"w b"   '(evil-window-bottom-right :which-key "Window Bottom Right")
"w n"   '(evil-window-new :which-key "New Window")
"w R"   '(evil-window-rotate-upwards :which-key "Window Rotate Upwards")
"w r"   '(evil-window-rotate-downwards :which-key "Window Rotate Downwards")
"w c"   '(evil-window-delete :which-key "Close window")
"w n"   '(evil-window-new :which-key "New window")
"w s"   '(evil-window-split :which-key "Horizontal split window")
"w v"   '(evil-window-vsplit :which-key "Vertical split window")
"w h"   '(evil-window-left :which-key "Window left")
"w j"   '(evil-window-down :which-key "Window down")
"w k"   '(evil-window-up :which-key "Window up")
"w l"   '(evil-window-right :which-key "Window right")
"w w"   '(evil-window-next :which-key "Goto next window")

;; Magit
"g"     '(:ignore t :which-key "git")
"g s"   '(magit-status :which-key "Status")
"g d"   '(magit-diff-unstaged :which-key "Diff")
"g c"   '(magit-branch-or-checkout :which-key "Checkout")
"g l"   '(:ignore t :which-key "Log")
"g l c" '(magit-log-current :which-key "Current")
"g l f" '(magit-log-buffer-file :which-key "File")
"g b"   '(magit-branch :which-key "Branch")
"g P"   '(magit-push-current :which-key "Push Current")
"g p"   '(magit-pull-branch :which-key "Pull Branch")
"g f"   '(magit-fetch :which-key "Fetch")
"g F"   '(magit-fetch-all :which-key "Fetch All")
"g r"   '(magit-rebase :which-key "Rebase")

;; Help
"h"     '(:ignore t :which-key "help")
"h RET" '(info-emacs-manual :which-key "Emacs Manual")
"h `"   '(describe-char :which-key "Describe Char")
"h f"   '(describe-function :which-key "Describe Function")
"h F"   '(describe-face :which-key "Describe Face")
"h g"   '(describe-gnu-project :which-key "Describe GNU Project")
"h i"   '(info :which-key "Info")
"h I"   '(describe-input-method :which-key "Describe Input Method")
"h k"   '(describe-key :which-key "Describe Key")
"h e"   '(view-echo-area-messages :which-key "View Echo Area Messages")
"h m"   '(describe-mode :which-key "Describe Mode")
"h o"   '(describe-symbol :which-key "Describe Symbol")
"h s"   '(describe-syntax :which-key "Describe Syntax")
"h t"   '(load-theme :which-key "Load Theme")
"h v"   '(describe-variable :which-key "Describe Variable")
"h r r" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config")

)

#+end_src

** Dashboard
    Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

*** Configuring Dashboard

#+begin_src emacs-lisp
    (use-package dashboard
     :ensure t  ;; install dashboard if not installed
     :init      ;; tweak dashboard config before loading it
     (setq dashboard-set-heading-icons t)
     (setq dashboard-set-file-icons t)
     (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
     ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
     (setq dashboard-startup-banner "/home/jackson/.emacs.d/emacs-dash.png")  ;; use custom image as banner
     (setq dashboard-center-content nil) ;; set to 't' for centered content
     (setq dashboard-items '((recents . 5)
                             (agenda . 5 )
                             (bookmarks . 3)
                             (projects . 3)
                             (registers . 3)))
     :config
     (dashboard-setup-startup-hook)
     (dashboard-modify-heading-icons '((recents . "file-text")
                                       (bookmarks . "book"))))
#+end_src

*** Dashboard in Emacsclient

      This setting ensures that emacsclient always opens on *dashboard* rather than *scratch*.

#+begin_src emacs-lisp
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

** EVIL MODE

      Evil is an extensible 'vi' layer for Emacs. It emulates the main features of Vim, and provides facilities for writing custom extensions.  Evil Collection is also installed since it adds 'evil' bindings to parts of Emacs that the standard Evil package does not cover, such as: calenda, help-mode adn ibuffer.

#+begin_src emacs-lisp
      (use-package evil
       :ensure t  ;; install evil if not installed
       :init      ;; tweak evil's configuration before loading it
       (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
       (setq evil-want-keybinding nil)
       (setq evil-vsplit-window-right t)
       (setq evil-split-window-below t)
       (evil-mode))
      (use-package evil-collection
       :after evil
       :ensure t
       :config
       (evil-collection-init))
#+end_src

** FINDING FILES

      Though 'recentf' is one way to find recent files although I prefer using 'counsel-recentf'.

#+begin_src emacs-lisp
      (use-package recentf
       :ensure t
       :config
       (recentf-mode))
#+end_src

** DIRED
      Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).  I've chosen the format of 'SPC d' plus 'key'.
      | COMMAND                                   | DESCRIPTION                                     | KEYBINDING |
      |-------------------------------------------+-------------------------------------------------+------------|
      | dired                                     | /Open dired file manager/                         | SPC d d    |
      | dired-jump                                | /Jump to current directory in dired/              | SPC d j    |
      | (in dired) peep-dired                     | /Toggle image previews within dired/              | SPC d p    |
      | (in dired) dired-view-file                | /View file in dired/                              | SPC d v    |
      | (in dired) dired-up-directory             | /Go up in the directory tree/                     | h          |
      | (in dired) dired-find-file                | /Go down in the directory tree (or open if file)/ | l          |
      | (in peep-dired-mode) peep-dired-next-file | /Move to next file in peep-dired-mode/            | j          |
      | (in peep-dired-mode) peep-dired-prev-file | /Move to previous file in peep-dired-mode/        | k          |

#+begin_src emacs-lisp
(use-package dired-open
 :ensure t)
(use-package peep-dired
 :ensure t)
(nvmap :prefix "SPC"
 "d"   '(:ignore t :which-key "dired")
 "d d" '(dired :which-key "Open dired")
 "d j" '(dired-jump :which-key "Dired jump to current"))
(with-eval-after-load 'dired
 (define-key dired-mode-map (kbd "M-p") 'peep-dired)
 (evil-define-key '(normal visual) dired-mode-map (kbd "h") 'dired-up-directory)
 (evil-define-key '(normal visual) dired-mode-map (kbd "l") 'dired-open-file)) ; use dired-find-file instead if not using dired-open package
(evil-define-key '(normal visual) dired-mode-map (kbd "j") 'peep-dired-next-file)
(evil-define-key '(normal visual) dired-mode-map (kbd "k") 'peep-dired-prev-file)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

* UI Configuration
** Basic Configuration

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(scroll-bar-mode -1)
(set-fringe-mode 10)
#+end_src

** Font Configuration
*** Setting The Font Face

#+begin_src emacs-lisp
      (set-face-attribute 'default nil
       :font "JetBrains Mono Nerd Font 12"
       :weight 'medium)
      (set-face-attribute 'variable-pitch nil
       :font "JetBrains Mono Nerd Font 12"
       :weight 'medium)
      (set-face-attribute 'fixed-pitch nil
       :font "JetBrains Mono Nerd Font 12"
       :weight 'medium)
      ;; Makes commented text italics (working in emacsclient but not emacs)
      (set-face-attribute 'font-lock-comment-face nil
       :slant 'italic)
      ;; Makes keywords italics (working in emacsclient but not emacs)
      (set-face-attribute 'font-lock-keyword-face nil
       :slant 'italic)

      ;; Uncomment the following line if line spacing needs adjusting.
      ;; (setq-default line-spacing 0.10)

      ;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
      (add-to-list 'default-frame-alist '(font . "JetBrains Mono Nerd Font 12"))
    ;; changes certain keywords to symbols, such as lamda!
(setq global-prettify-symbols-mode t)
#+end_src

** Display Line Numbers and Truncated Lines

Sets the type of line numbers.

| Value    | Description           |
|----------+-----------------------|
| nil      | Disable line numbers  |
| relative | Relative line numbers |
| t        | Normal line numbers   |

#+begin_src emacs-lisp

(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
(setq display-line-numbers-type 'relative)

(column-number-mode)
(global-display-line-numbers-mode t)
;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                dashboard-startup-setup-hook
                which-key-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Modeline and Theme
*** Modeline 

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :config
  (doom-modeline-mode 1))
#+end_src

*** Theme

#+begin_src emacs-lisp

(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")

(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-nvcode t)

  (doom-themes-visual-bell-config)
 
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

** Ivy and Counsel
*** Diminish

#+begin_src emacs-lisp
(use-package diminish
:ensure t)
#+end_src

*** Counsel

#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)
	 ("C-x b" . counsel-ibuffer)
	 ("C-x C-f" . counsel-find-file)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history)))
  :config
  (counsel-mode 1)
  (setq ivy-initial-inputs-alist nil)
#+end_src

*** Ivy

#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
#+end_src

*** Ivy-rich

#+begin_src emacs-lisp
(use-package ivy-rich
  :ensure t
  :init
  (ivy-rich-mode 1))
#+end_src

*** Ivy-prescient

#+begin_src emacs-lisp
(use-package ivy-prescient
  :ensure t
  :after counsel
  :config
  (ivy-prescient-mode 1))
#+end_src

*** Ivy-Posframe

#+begin_src emacs-lisp
(use-package ivy-posframe
  :ensure t
  :init
  (setq ivy-posframe-display-functions-alist
	'((swiper                     . ivy-posframe-display-at-point)
	  (complete-symbol            . ivy-posframe-display-at-point)
	  (counsel-M-x                . ivy-display-function-fallback)
	  (counsel-esh-history        . ivy-posframe-display-at-window-center)
	  (counsel-describe-function  . ivy-display-function-fallback)
	  (counsel-describe-variable  . ivy-display-function-fallback)
	  (counsel-find-file          . ivy-display-function-fallback)
	  (counsel-recentf            . ivy-display-function-fallback)
	  (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
	  (dmenu                      . ivy-posframe-display-at-frame-top-center)
	  (nil                        . ivy-posframe-display))
	ivy-posframe-height-alist
	'((swiper . 20)
	  (dmenu . 20)
	  (t . 10)))
  :config
  (ivy-posframe-mode 1)) ; 1 enables posframe-mode, 0 disables it.
#+end_src

** Which Key

#+begin_src emacs-lisp
 (use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+end_src

** Helpful Help Commands

#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

* Org Mode
** General Settings

#+begin_src emacs-lisp
        (add-hook 'org-mode-hook 'org-indent-mode)
        (setq org-directory "~/Org/"
         org-agenda-files '("~/Org/agenda.org")
         org-default-notes-file (expand-file-name "notes.org" org-directory)
         org-ellipsis " ▼ "
         org-log-done 'time
         org-journal-dir "~/Org/journal/"
         org-journal-date-format "%B %d, %Y (%A) "
         org-journal-file-format "%Y-%m-%d.org"
         org-hide-emphasis-markers t)
        (setq org-src-preserve-indentation nil
         org-src-tab-acts-natively t
         org-edit-src-content-indentation 0)
#+end_src

** Enabling Org Bullets

#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode))
#+end_src

** Org Link Abbreviations

#+begin_src emacs-lisp
        ;; An example of how this works.
        ;; [[arch-wiki:Name_of_Page][Description]]
        (setq org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
         '(("google" . "http://www.google.com/search?q=")
             ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
             ("ddg" . "https://duckduckgo.com/?q=")
             ("wiki" . "https://en.wikipedia.org/wiki/")))
#+end_src

** Org Todo Keywords
        This lets us create the various TODO tags that we can use in Org.

#+begin_src emacs-lisp
        (setq org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
         '((sequence
                 "TODO(t)"           ; A task that is ready to be tackled
                 "BLOG(b)"           ; Blog writing assignments
                 "GYM(g)"            ; Things to accomplish at the gym
                 "PROJ(p)"           ; A project that contains other tasks
                 "VIDEO(v)"          ; Video assignments
                 "WAIT(w)"           ; Something is holding up this task
                 "|"                 ; The pipe necessary to separate "active" states and "inactive" states
                 "DONE(d)"           ; Task has been completed
                 "CANCELLED(c)" )))  ; Task has been cancelled
#+end_src

** Configure Babel Languages

#+begin_src emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (python . t)
    (shell . t)))

(setq org-confirm-babel-evaluate nil)

(push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

** Source Code Block Tag Expansion

        | Characters Preceding TAB | Expands to ...                          |
        |--------------------------+-----------------------------------------|
        | <a                       | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
        | <c                       | '#+BEGIN_CENTER' … '#+END_CENTER'       |
        | <C                       | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
        | <e                       | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
        | <E                       | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
        | <h                       | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
        | <l                       | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
        | <q                       | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
        | <s                       | '#+BEGIN_SRC' … '#+END_SRC'             |
        | <v                       | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("ja" . "src java"))
(add-to-list 'org-structure-template-alist '("js" . "src js"))
#+end_src

** Source Code Block Syntax Highlighting
    We want the same syntax highlighting in source blocks as in the native language files.

#+begin_src emacs-lisp
    (setq org-src-fontify-natively t
     org-src-tab-acts-natively t
     org-confirm-babel-evaluate nil
     org-edit-src-content-indentation 0)
#+end_src

** Org Mode Visual Fill

#+begin_src emacs-lisp
(defun jade/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :ensure t
  :hook (org-mode . jade/org-mode-visual-fill))
#+end_src

* Development
** Languages
*** Languge Servers
**** lsp-mode

#+begin_src emacs-lisp
(defun jade/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :ensure t
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . jade/lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
  :config
  (lsp-enable-which-key-integration t))
(add-hook 'prog-mode 'lsp-mode)

(dolist (mode '(sh-mode-hook
                web-mode-hook
                c-mode-hook))
  (add-hook mode (lambda () (lsp 1))))
#+end_src

**** lsp-ui

#+begin_src emacs-lisp
(use-package lsp-ui
  :ensure t
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))
#+end_src
 
*** TypeScript

#+begin_src emacs-lisp
(use-package typescript-mode
  :ensure t
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 4))
#+end_src

Make sure to run this as well to install the language server and the language through npm.

#+begin_src shell
npm install -g typescript-language-server typescript
#+end_src

*** HTML 
**** Web Mode

 #+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :hook (html-mode . web-mode))
 #+end_src

#+begin_src shell
npm install -g vscode-html-languageserver-bin
#+end_src

**** Auto Rename Tag

#+begin_src emacs-lisp
(use-package auto-rename-tag
  :ensure t
  :hook (web-mode . auto-rename-tag-mode))
#+end_src

**** Impatient-Mode 

#+begin_src emacs-lisp
(use-package impatient-mode
  :ensure t)
#+end_src

**** Emmet
***** Base Installation

#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :hook (emmet-mode . emmet-preview-mode))
#+end_src

***** Hooks

#+begin_src emacs-lisp
(add-hook 'css-mode-hook 'emmet-mode)
(add-hook 'web-mode-hook 'emmet-mode)
#+end_src

***** Variables 

#+begin_src emacs-lisp
(setq emmet-self-closing-tag-style " /")
#+end_src

*** YAML

#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t)
#+end_src

*** Ini

#+begin_src emacs-lisp
(use-package ini-mode
  :ensure t)
#+end_src

*** Haskell 

#+begin_src emacs-lisp
(use-package haskell-mode
  :ensure t)
#+end_src

** Company Mode 

#+begin_src emacs-lisp

(use-package company
  :ensure t
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-select-next)
         ("<ret>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0))
  
(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode))

#+end_src

*** Backends
**** Installing all backends
***** Web

#+begin_src emacs-lisp
(use-package company-web
  :ensure t)
#+end_src

**** Setting backends 

#+begin_src emacs-lisp
(add-to-list 'company-backends 'company-yasnippet)
(add-to-list 'company-backends 'company-web)
#+end_src

** Yasnippets 
*** Base install

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :bind (("C-c e" . yas-expand) 
         ("C-c n" . yas-next-field)))
(add-hook 'prog-mode-hook 'yas-minor-mode)
(add-hook 'latex-mode-hook 'yas-minor-mode)
;; (add-hook 'yas-minor-mode-hook '(yas-load-directory "~/.emacs.d/snippets"))
#+end_src

*** Snippets

#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :ensure t)
#+end_src

** Magit

#+begin_src emacs-lisp
        (use-package magit
         :ensure t)
        (use-package magit-todos
         :ensure t
         :config (magit-todos-mode))
#+end_src

** Flycheck 

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :hook (lsp-mode . flycheck-mode))
#+end_src

** Projectile

#+begin_src emacs-lisp
    (use-package projectile
     :ensure t
     :config
     (projectile-global-mode 1))
#+end_src

** Commenting

#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :ensure t
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Autopair

#+begin_src emacs-lisp
(use-package autopair
  :ensure t
  :config
  (autopair-global-mode))
#+end_src

** Git Gutter 
*** Base Install

#+begin_src emacs-lisp
(use-package git-gutter
  :ensure t)
#+end_src

*** Global mode

#+begin_src emacs-lisp
(global-git-gutter-mode t)
#+end_src

*** Update interval

#+begin_src emacs-lisp
(custom-set-variables
 '(git-gutter:update-interval 1))
#+end_src

*** Sign Colors

#+begin_src emacs-lisp
(set-face-background 'git-gutter:modified "purple")
(set-face-foreground 'git-gutter:added "green")
(set-face-foreground 'git-gutter:deleted "red")
#+end_src

*** Sign Symbols

#+begin_src emacs-lisp
(custom-set-variables
 '(git-gutter:modified-sign "~~") 
 '(git-gutter:added-sign "++")   
 '(git-gutter:deleted-sign "--"))
#+end_src

** Rainbow Delimiters

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :ensure t)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode) 
(add-hook 'org-mode-hook 'rainbow-delimiters-mode) 

#+end_src

* Shells
** Eshell
    Eshell is an Emacs 'shell' that is written in Elisp.
    + 'eshell-syntax-highlighting' -- adds fish/zsh-like syntax highlighting.
    + 'eshell-aliases-file' -- sets an aliases file for the eshell.

#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
 :ensure t
 :after esh-mode
 :ensure t ;; Install if not already installed.
 :config
 (eshell-syntax-highlighting-global-mode +1))
(setq eshell-aliases-file "~/.config/doom/aliases"
 eshell-history-size 5000
 eshell-buffer-maximum-lines 5000
 eshell-hist-ignoredups t
 eshell-scroll-to-bottom-on-input t
 eshell-destroy-buffer-when-process-dies t
 eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

** Vterm
    Vterm is a terminal emulator within Emacs.  The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.  By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.

#+begin_src emacs-lisp
    (use-package vterm
     :ensure t)
    (setq shell-file-name "/bin/zsh"
     vterm-max-scrollback 5000)
#+end_src

