#!/bin/sh

#    ____    __
#   / __/__ / /___ _____
#  _\ \/ -_) __/ // / _ \
# /___/\__/\__/\_,_/ .__/
#                 /_/

# Add description here:
# > Hello World!
# > This is my setup script.

# Values
#. "$DOTFILES_PATH/home/.config/env" # Get your environment variables if you have

STEPS="${*:-home root}" # Default order of steps

#TRASH_PATH="${XDG_DATA_HOME:-$HOME/.local/share}/Trash/files" # Uncomment this if you want to move conflict files to trash instead of delete it

# Functions
install_packages() {
	printf '\n\033[1;7;34m%s\033[0m\n' 'Install packages'
	superbbootstrap_install_packages "$DOTFILES_PATH/packageslist" # you can change packageslist's path here

	# Add more packages that you want to install here
	#printf '\n\033[1;7;34m%s\033[0m\n' 'Install extra packages'
	#pip install --upgrade 'git+https://github.com/will8211/unimatrix.git'
}

symlink_home() {
	printf '\n\033[1;7;36m%s\033[0m\n' "Symlink to home ($HOME)"

	superbbootstrap_batch_symlink "$DOTFILES_PATH/home" "$HOME"

	# Use this if you want to batch symlink with bsymlink
	#bsymlink "$DOTFILES_PATH/home" "$HOME"

	# Use this if you want to batch symlink with stow (you must cd to the directory that contain this setup file)
	#stow -vt ~ home
}

symlink_root() {
	printf '\n\033[1;7;36m%s\033[0m\n' 'Symlink to root (/)'

	superbbootstrap_batch_symlink "$DOTFILES_PATH/root" '/' "$PERMISSION_COMMAND"

	# Use this if you want to batch symlink with bsymlink
	#$PERMISSION_COMMAND bsymlink "$DOTFILES_PATH/root" '/'

	# Use this if you want to batch symlink with stow (you must cd to the directory that contain this setup file)
	#$PERMISSION_COMMAND stow -vt / root
}

before_symlink() {
	printf '\n\033[1;7;33m%s\033[0m\n' 'Setup before symlink'

	# Create directories (to symlink files inside only, not the directory itself)
	mkdir -p "$HOME/.config" "$HOME/.local/share" "$HOME/.local/bin" "$HOME/.local/repos" "$HOME/.local/lib" "$HOME/.cache"

	# Remove files that may conflict when symlink dotfiles
	rm "$HOME"/.bashrc
	rm "$HOME"/.bash_profile

	# Remove conflicting items in $HOME/.config
	[ -d "$HOME/.config" ] && for config_directory_path in "$HOME/.config/."* "$HOME/.config/"*; do
		config_directory_name="${config_directory_path#$XDG_CONFIG_HOME/}"

		if [ "$config_directory_name" != '.' ] && [ "$config_directory_name" != '..' ] && [ -e "$HOME/dots/home/.config/$config_directory_name" ]; then
			rm "$config_directory_path"
		fi
	done
}

# Values
WD="$PWD"

TMPDIR="${TMPDIR:-/tmp}"
TEMPORARY="$TMPDIR/superb-bootstrap"

DOTFILES_PATH=$(cd -P -- "$(dirname -- "$0")" && pwd -P)

superbbootstrap_batch_symlink() {
	batch_symlink_directory="$1"
	batch_symlink_target="$2"
	batch_symlink_permission="$3"

	[ -n "$TRASH_PATH" ] && mkdir -p "$TRASH_PATH"

	if [ -d "$1" ]; then
		superbbootstrap_scan_directory "$batch_symlink_directory"
	else
		printf '\n\033[1;7;31m%s\033[0m\n' "'$batch_symlink_directory' not found"
	fi
}

superbbootstrap_scan_directory() {
	[ -d "$1" ] || exit 1

	for file in "$1"/.* "$1"/*; do
		[ "$file" = "$1/." ] || [ "$file" = "$1/.." ] || [ "$file" = "$1/*" ] && continue

		target="$batch_symlink_target${file#$batch_symlink_directory}"

		if [ -e "$target" ]; then
			if [ -d "$target" ] && [ ! -h "$target" ]; then
				superbbootstrap_scan_directory "$file"
			else
				# You can change how batch symlink handle conflict files
				if [ -n "$TRASH_PATH" ]; then
					rm -rf "$TRASH_PATH/$(basename "$target")" 2>&-
					$batch_symlink_permission mv -f "$target" "$TRASH_PATH/"
				else
					$batch_symlink_permission rm -rf "$target"
				fi

				$batch_symlink_permission ln -sf "$file" "$target"
			fi
		else
			$batch_symlink_permission ln -sf "$file" "$target"
		fi
	done
}

# Start
for step_check in $STEPS; do
	case "$step_check" in
	'h' | 'home') steps_list="${steps_list:+$steps_list; }symlink_home" ;;
	'r' | 'root') steps_list="${steps_list:+$steps_list; }symlink_root" ;;
	*)
		printf '\n\033[1;7;31m%s\033[0m\n' "Step '$step_check' not found"
		exit 1
		;;
	esac
done

eval "$steps_list"

exit 0
